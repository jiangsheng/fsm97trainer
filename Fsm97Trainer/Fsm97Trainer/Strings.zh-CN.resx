<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AllPlayerDataBoosted" xml:space="preserve">
    <value>所有球员数据已增益</value>
  </data>
  <data name="CannotFindGameProcess" xml:space="preserve">
    <value>游戏进程找不到!</value>
  </data>
  <data name="CannotFindNewSpawn" xml:space="preserve">
    <value>没找到重生球员</value>
  </data>
  <data name="CanOnlyChangeAtSeasonStart" xml:space="preserve">
    <value>只能在赛季初修改</value>
  </data>
  <data name="CanOnlyChangeDateInOffseason" xml:space="preserve">
    <value>只能在赛季末尾修改日期</value>
  </data>
  <data name="FormationSaved" xml:space="preserve">
    <value>阵容已保存</value>
  </data>
  <data name="GameDateChangeWarning" xml:space="preserve">
    <value>为了避免2079年球员年龄出错，请在2079年之前重设日期。另外，如果在赛季中重设，会造成赛程错误，应该在休赛期重设日期。继续？</value>
  </data>
  <data name="GameDateOutOfReangePrompt" xml:space="preserve">
    <value>请输入1901-2078之间的整数</value>
  </data>
  <data name="GameDateReset" xml:space="preserve">
    <value>游戏日期已重设</value>
  </data>
  <data name="InvalidFormationForSaving" xml:space="preserve">
    <value>保存阵容需要场上有11名球员，包括一名守门员</value>
  </data>
  <data name="MultipleGameProcessFound" xml:space="preserve">
    <value>检测到多个游戏进程</value>
  </data>
  <data name="NotEnoughPlayersForAutoPosition" xml:space="preserve">
    <value>当前场上需要11名球员才可以自动调整位置</value>
  </data>
  <data name="PlayerDataCopied" xml:space="preserve">
    <value>球员数据已复制。</value>
  </data>
  <data name="PlayerDataImported" xml:space="preserve">
    <value>球员数据已导入。</value>
  </data>
  <data name="PlayerDataPasted" xml:space="preserve">
    <value>球员数据已粘贴。</value>
  </data>
  <data name="PlayerNamesUpdated" xml:space="preserve">
    <value>球员名字已更新</value>
  </data>
  <data name="PlayersRotated" xml:space="preserve">
    <value>球员已轮换</value>
  </data>
  <data name="PleaseCopyPlayerDataFirst" xml:space="preserve">
    <value>请先复制数据！</value>
  </data>
  <data name="PleaseSwitchToTheTrainingSchedulePageFirstContinue" xml:space="preserve">
    <value>请切换到训练安排页。继续？</value>
  </data>
  <data name="PositionAutoReset" xml:space="preserve">
    <value>位置已重设</value>
  </data>
  <data name="SeasonBeginningOnly" xml:space="preserve">
    <value>只能在新赛季开始时进行。继续？</value>
  </data>
  <data name="SelectPlayerDataExportLlocation" xml:space="preserve">
    <value>选择球员数据保存路径</value>
  </data>
  <data name="UnsupportedGameVersion" xml:space="preserve">
    <value>不支持的游戏版本</value>
  </data>
  <data name="Warning" xml:space="preserve">
    <value>警告</value>
  </data>
  <data name="WarningConvertToGK" xml:space="preserve">
    <value>更换替补球员位置为守门员会减少受伤，但是球员会抱怨甚至威胁退役，经理也会定期要求提高球队水平但是不会被解雇。继续？</value>
  </data>
  <data name="YouthPlayerDataBoosted" xml:space="preserve">
    <value>年轻球员数据已增益</value>
  </data>
  <data name="YouthPlayerNotFound" xml:space="preserve">
    <value>未找到匹配的年轻球员</value>
  </data>
</root>